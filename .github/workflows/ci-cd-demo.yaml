name: Java CI/CD Pipeline for Demo Service

on:
  push:
    branches: [main]
    # paths:
    #   - 'my-microservices/demo/**'
  pull_request:
    branches: [main]
    # paths:
    #   - 'my-microservices/demo/**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew
        working-directory: ./my-microservices

      - name: Build with Gradle
        run: ./gradlew build
        working-directory: ./my-microservices

      - name: Run tests
        run: ./gradlew test
        working-directory: ./my-microservices

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/demo-service:${{ github.sha }} -f demo/Dockerfile .
        working-directory: ./my-microservices

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/demo-service:${{ github.sha }}
        working-directory: ./my-microservices

  snyk-scan:
      needs: build-and-test
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
  
        - name: Set up JDK 17
          uses: actions/setup-java@v2
          with:
            java-version: '17'
            distribution: 'temurin'
  
        - name: Install Snyk
          run: npm install -g snyk
  
        - name: Snyk Vulnerability Scan
          run: snyk test --all-projects
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        

  sonarqube:
    needs: [build-and-test, snyk-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Test SonarQube connection
        run: curl -I ${{ secrets.SONAR_HOST_URL }}

          
      - name: Build and analyze with SonarQube
        run: ./gradlew build sonar --info
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        working-directory: ./my-microservices


  deploy:
    needs: [build-and-test, snyk-scan, sonarqube]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Install AWS CLI and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli jq

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region eu-central-1 --name video-streaming-eks-cluster
          echo "Kubeconfig file content:"
          cat $HOME/.kube/config

      - name: Deploy to Kubernetes
        run: |
          sed -i 's|IMAGE_NAME_PLACEHOLDER:TAG_PLACEHOLDER|${{ secrets.DOCKER_USERNAME }}/demo-service:${{ github.sha }}|' ./k8s/demo-deployment.yaml
          kubectl apply -f ./k8s/demo-deployment.yaml
          kubectl apply -f ./k8s/demo-service.yaml
          kubectl rollout status deployment/demo-service-app
