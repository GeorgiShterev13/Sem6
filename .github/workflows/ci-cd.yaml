name: Java CI/CD Pipeline without SonarQube

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant execute permission for Gradle
      run: chmod +x ./gradlew
      working-directory: ./demo

    - name: Build with Gradle
      run: ./gradlew build
      working-directory: ./demo

    - name: Run tests
      run: ./gradlew test
      working-directory: ./demo

    - name: Build Docker image
      run: docker build . -t ${{ secrets.DOCKER_USERNAME }}/my-spring-boot-app:${{ github.sha }}
      working-directory: ./demo

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image to Docker Hub
      run: docker push ${{ secrets.DOCKER_USERNAME }}/my-spring-boot-app:${{ github.sha }}
      working-directory: ./demo

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

    - name: Install or Update AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -o awscliv2.zip
        sudo ./aws/install -u

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Setup Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo ${{ secrets.KUBE_CONFIG_DATA }} | base64 --decode > $HOME/.kube/config || echo "Failed to decode kubeconfig"
        ls -l $HOME/.kube
        if test -f "$HOME/.kube/config"; then
          cat $HOME/.kube/config  # Temporarily for debugging, remove later
        else
          echo "kubeconfig does not exist"
        fi
      


    - name: Debug Token Fetching
      run: |
        aws eks get-token --region eu-central-1 --cluster-name video-streaming-eks-cluster


    - name: Deploy to Kubernetes
      run: |
        kubectl get nodes
        kubectl apply -f k8s/
        kubectl rollout status deployment/my-spring-boot-app-deployment
        kubectl get all -n default
